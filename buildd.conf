# buildd.conf: buildd settings.                                    -*- Perl -*-
# Default settings are commented out.
# Note that all possible settings are listed here.  Many may be set on
# the command-line, and do not normally need setting here,
# e.g. $verbose.  Others need setting by each individual user in their
# ~/.builddrc, but are listed here for completeness.


##
## Build environment
##

# PATH
# Type: STRING
# PATH to set when running dpkg-buildpackage.
#$path =
#'/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games';



##
## Build options
##

# BUILD_ARCH
# Type: STRING
# Build architecture (Arch we are building on).
$build_arch = 'armhf';

# DISTRIBUTION
# Type: STRING
# Default distribution.  By default, no distribution is defined, and the
# user must specify it with the -d option.  However, a default may be
# configured here if desired.  Users must take care not to upload to the
# wrong distribution when this option is set, for example experimental
# packages will be built for upload to unstable when this is not what is
# required.
$distribution = 'buster-staging';

# DISTRIBUTIONS
# Type: ARRAY:HASH:SCALAR
# List of distributions that buildd should take packages from


    @distributions = (
                {
                # name of the suite to build (also used to query wanna-build)
                dist_name => ["buster-staging"],
    
                # architecture to be built (will be passed to sbuild and can be
                # used to compute wanna_build_db_name
                built_architecture => "armhf",
    
                # host on which wanna-build is run
                wanna_build_ssh_host => "127.0.0.1",
    
                # user as who we are going to connect to the host running wanna-build
                wanna_build_ssh_user => "buildd",
#    
#               # SSH control socket path for ssh -S option
#               wanna_build_ssh_socket => "",
#    
#               # Additional SSH options used when connecting
                wanna_build_ssh_options => ["-p","8022"],
#    
#               # database used for wanna-build
#               wanna_build_db_name => "arch/build-db",
#    #
                # Username to use for wanna-build.OD
                wanna_build_db_user => 'buildd_arch-testbuildd',
##    
#               # Local queue directory where binaries are stored before uploaded
# #             # by dupload. You need to configure this directory in
#  #            # @upload_queues to get packages uploaded from there.
                dupload_local_queue_dir => "upload",
#    #
#               # list of packages which shouldn't be picked up by buildd
               no_auto_build => ["vtk6"],
#    
#               # list of packages which should only be taken if there absolutely
#               # nothing else to do (probably packages included in no_auto_build
#               # because they take too long)
#               weak_no_auto_build => [],
#    
#               # regex used to filter out unwanted packages:
#               #no_build_regex => "^(contrib/|non-free/)?non-US/",
#    
#               # regex used to filter packages to build:
#               #build_regex => "",
#    
#               # mail addr of buildd admin handling packages from this distribution
                logs_mailed_to => 'logs@raspbian.org',
#    
#               # schroot name (or alias) of the chrooted environment to use for
#               # building (will be passed to sbuild). sbuild's default is
#               # the first of $distribution-$arch-sbuild, $distribution-sbuild,
#               # $distribution-$arch and $distribution.
#               sbuild_chroot => undef,
#    
        }


    );

# HOST_ARCH
# Type: STRING
# Host architecture (Arch we are building for)
$host_arch = 'armhf';

# NICE_LEVEL
# Type: NUMERIC
# Nice level to run sbuild.  Dedicated build daemons should not be niced.
$nice_level = 0;



##
## Daemon
##

# DAEMON_LOG_FILE
# Type: STRING
# Main buildd daemon log file
#$daemon_log_file = '/tmp/buildd/daemon.log';

# DELAY_AFTER_GIVE_BACK
# Type: NUMERIC
# Time to avoid packages that have automatically been given back by sbuild
# (in minutes)
#$delay_after_give_back = 480;

# IDLE_SLEEP_TIME
# Type: NUMERIC
# Time to sleep when idle (in seconds) between wanna-build
# --list=needs-build calls)
#$idle_sleep_time = 300;

# MIN_FREE_SPACE
# Type: NUMERIC
# Minimum free space (in KiB) on build filesystem
#$min_free_space = 51200;

# NO_DETACH
# Type: BOOL
# Disable becoming a daemon, for debugging purposes.  Set to 1 to stop
# daemonising, otherwise set to 0 to become a daemon.
#$no_detach = 0;

# PIDFILE
# Type: STRING
# PID file to identify running daemon.
#$pidfile = '/tmp/buildd/build/buildd.pid';

# SHOULD_BUILD_MSGS
# Type: BOOL
# Should buildd send "Should I build" messages?
#$should_build_msgs = 1;



##
## Logging options
##

# DEBUG
# Type: NUMERIC
# Debug logging level
#$debug = 0;

# VERBOSE
# Type: NUMERIC
# Verbose logging level
#$verbose = 0;



##
## Mail
##

# ADMIN_MAIL
# Type: STRING
# email address for admin
$admin_mail = 'buildd@raspbian.org';

# ERROR_MAIL_WINDOW
# Type: NUMERIC
# If more than five error mails are received within the specified time (in
# seconds), do not forward (to avoid possible mail loops)
#$error_mail_window = 28800;

# LOG_QUEUED_MESSAGES
# Type: BOOL
# Log success messages from upload queue daemon?
#$log_queued_messages = 0;



##
## Programs
##

# APT_GET
# Type: STRING
# Path to apt-get binary
$apt_get = 'apt-get';

# MAILPROG
# Type: STRING
# Program to use to send mail
$mailprog = '/usr/sbin/sendmail';

# SSH
# Type: STRING
# Path to ssh binary
$ssh = 'ssh';

# SUDO
# Type: STRING
# Path to sudo binary
$sudo = 'sudo';



##
## Uploader
##

# UPLOAD_QUEUES
# Type: ARRAY:HASH:SCALAR
# Package upload queues
    @upload_queues = (
    	{
    		# Local queue directory where binaries are stored before uploaded
    		# by dupload.
    		dupload_local_queue_dir => "upload",
    
    		# Upload site for buildd-upload to pass to dupload(1); see
    		# /etc/dupload.conf for possible values.
    		dupload_archive_name => "raspbian-new",
    	}
    
#    	,{
#    		# Local queue directory where binaries are stored before uploaded
#    		# by dupload.
#    		dupload_local_queue_dir => "upload-security",
#    
#    		# Upload site for buildd-upload to pass to dupload(1); see
#    		# /etc/dupload.conf for possible values.
#    		dupload_archive_name => "security",
#    	}
   );



##
## Watcher
##

# BUILD_LOG_KEEP
# Type: NUMERIC
# Number of days until build logs are archived
#$build_log_keep = 2;

# DAEMON_LOG_KEEP
# Type: NUMERIC
# Number of days until old daemon logs are archived in a .tar.gz file
#$daemon_log_keep = 7;

# DAEMON_LOG_ROTATE
# Type: NUMERIC
# Number how many days until daemon logs are rotated (one is kept as
# daemon.log.old, others are moved to old-logs and gzipped)
#$daemon_log_rotate = 1;

# DAEMON_LOG_SEND
# Type: BOOL
# email rotated daemon logs to the admin?
#$daemon_log_send = 1;

# NO_WARN_PATTERN
# Type: STRING
# Don't complain about old files if they match the regexp.
#$no_warn_pattern =
#'^build/(SKIP|REDO|SBUILD-GIVEN-BACK|buildd\\.pid|[^/]*.ssh|chroot-[^/]*|c
#urrent-[^/]*)$';

# PKG_LOG_KEEP
# Type: NUMERIC
# Number of days until to package logs are archived
#$pkg_log_keep = 7;

# STATISTICS_MAIL
# Type: STRING
# email address for statistics summaries
#$statistics_mail = 'root';

# STATISTICS_PERIOD
# Type: NUMERIC
# Period for statistic summaries (days)
#$statistics_period = 7;

# WARNING_AGE
# Type: NUMERIC
# Age (in days) after which a warning is issued for files in upload and
# dirs in build
#$warning_age = 7;



##
## wanna-build client
##

# BUILT_ARCHITECTURE
# Type: STRING
# Architecture for database
#$wanna_build_built_architecture = 'amd64';

# WANNA_BUILD_DB_NAME
# Type: STRING
# Database name
#$wanna_build_db_name = undef;

# WANNA_BUILD_DB_USER
# Type: STRING
# Database user
#$wanna_build_db_user = 'pbuilder';

# WANNA_BUILD_SSH_HOST
# Type: STRING
# Host for SSH connection
#$wanna_build_ssh_host = '';

# WANNA_BUILD_SSH_OPTIONS
# Type: ARRAY:STRING
# SSH options.	Note this is an array reference.
#$wanna_build_ssh_options = [];

# WANNA_BUILD_SSH_SOCKET
# Type: STRING
# Socket for SSH connection
#$wanna_build_ssh_socket = '';

# WANNA_BUILD_SSH_USER
# Type: STRING
# Username for SSH connection
#$wanna_build_ssh_user = '';

1;
